{"version":3,"sources":["Filter.js","PersonForm.js","Persons.js","Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","newFilter","handleFilterChange","value","onChange","PersonForm","addEntry","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Person","person","remove","name","number","onClick","Persons","persons","filter","search","RegExp","map","key","Notification","message","className","baseUrl","getAll","axios","get","then","response","data","post","id","put","person_id","delete","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","statusMessage","setStatusMessage","useEffect","personService","all","event","target","preventDefault","found","find","window","confirm","updated","p","setTimeout","catch","error","alert","created","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.6d0fc308.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({newFilter, handleFilterChange}) => (\r\n    <div>filter entries:\r\n        <input value={newFilter} onChange={handleFilterChange}/>\r\n    </div>)\r\n\r\nexport default Filter\r\n","import React from 'react'\r\n\r\nconst PersonForm = ({addEntry, newName, handleNameChange, newNumber, handleNumberChange}) => (\r\n    <form onSubmit={addEntry}>\r\n        <div>name: <input value={newName} onChange={handleNameChange}/></div>\r\n        <div>number: <input value={newNumber} onChange={handleNumberChange}/></div>\r\n        <div><button type=\"submit\">add</button></div>\r\n    </form>)\r\n\r\nexport default PersonForm\r\n","import React from 'react'\r\n\r\nconst Person = ({person, remove}) => (<li>\r\n        {person.name}, {person.number}\r\n        <button onClick={() => remove(person)}>delete</button> \r\n    </li>)\r\n\r\nconst Persons = ({persons, newFilter, remove}) => {\r\n    return (<ul>\r\n            {persons\r\n             .filter(person => person.name.search(new RegExp(newFilter, 'i')) !== -1)\r\n             .map(person => <Person key={person.name} person={person} remove={remove}/>)}\r\n            </ul>)\r\n}\r\n\r\nexport default Persons\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"notification\">\r\n        {message}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => (\r\n    axios\r\n        .get(baseUrl)\r\n        .then(response => response.data)\r\n)\r\n\r\nconst create = person => (\r\n    axios\r\n        .post(baseUrl, person)\r\n        .then(response => response.data)\r\n)\r\n\r\nconst update = (id, person) => (\r\n    axios\r\n        .put(`${baseUrl}/${id}`, person)\r\n        .then(response => response.data)\r\n)\r\n\r\nconst remove = person_id => (\r\n    axios\r\n        .delete(`${baseUrl}/${person_id}`)\r\n        .then(getAll)\r\n)\r\n\r\nexport default { getAll, create, update, remove }\r\n","import React, { useState, useEffect } from 'react'\nimport Filter from './Filter'\nimport PersonForm from './PersonForm'\nimport Persons from './Persons'\nimport Notification from './Notification'\nimport personService from './services/persons'\nimport './index.css'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ statusMessage, setStatusMessage ] = useState(null)\n\n  const addEntry = (event) => {\n    event.preventDefault()\n    const person = {name: newName, number: newNumber}\n    const found = persons.find(person => person.name === newName)\n    if (found)\n    {\n      if (window.confirm(`${newName} is already in the phonebook. Update their number?`)){\n        personService\n          .update(found.id, person)\n          .then((updated) => {\n            setPersons(persons.map(p => p.id !== updated.id ? p : updated))\n            setStatusMessage(`Updated ${updated.name}`)\n            setTimeout(() => setStatusMessage(null), 5000)\n          })\n          .catch(error => {\n            alert(`${newName} is no longer in the phonebook`)\n            setPersons(persons.filter(p => p.id !== found.id))\n          })\n      }\n    }\n    else\n    {\n      personService\n        .create(person)\n        .then(created => {\n          setPersons(persons.concat(created))\n          setStatusMessage(`Added ${created.name}`)\n          setTimeout(() => setStatusMessage(null), 5000)\n        })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const removeEntry = (person) => {\n    if (window.confirm(`Remove ${person.name}?`)) {\n      const id = person.id\n      personService.remove(id)\n        .then(all => setPersons(all))\n        .catch(error => {\n          alert(`${person.name} had already been removed from the phonebook`)\n          setPersons(persons.filter(p => p.id !== id))\n        })\n    }\n  }\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleFilterChange = (event) => setNewFilter(event.target.value)\n\n  useEffect(() => {\n    personService.getAll().then(all => setPersons(all))\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={statusMessage} />\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n      <PersonForm addEntry={addEntry}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons} newFilter={newFilter} remove={removeEntry}/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}